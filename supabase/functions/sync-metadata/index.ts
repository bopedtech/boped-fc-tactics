import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.75.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const METADATA_API_URL = 'https://renderz.app/24/programs/__data.json?x-sveltekit-invalidated=111';

// H√†m ƒë·ªá quy ƒë·ªÉ duy·ªát to√†n b·ªô c·∫•u tr√∫c JSON
function traverseAndExtract(node: any, foundData: any): void {
  // ƒêi·ªÅu ki·ªán d·ª´ng ƒë·ªá quy
  if (!node || typeof node !== 'object') return;

  // N·∫øu l√† m·∫£ng, duy·ªát qua t·ª´ng ph·∫ßn t·ª≠
  if (Array.isArray(node)) {
    node.forEach(item => traverseAndExtract(item, foundData));
    return;
  }

  // Logic nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng (Heuristics)
  if (node.id != null && node.name) {
    const id = node.id;
    const name = String(node.name);

    // 1. Nh·∫≠n d·∫°ng Clubs (ID s·ªë, t√™n b·∫Øt ƒë·∫ßu b·∫±ng TeamName_)
    if (typeof id === 'number' && name.startsWith("TeamName_")) {
      foundData.clubs.set(id, node);
    } 
    // 2. Nh·∫≠n d·∫°ng Leagues (ID s·ªë, t√™n b·∫Øt ƒë·∫ßu b·∫±ng LeagueName_)
    else if (typeof id === 'number' && name.startsWith("LeagueName_")) {
      foundData.leagues.set(id, node);
    }
    // 3. Nh·∫≠n d·∫°ng Nations (ID s·ªë, t√™n b·∫Øt ƒë·∫ßu b·∫±ng NationName_)
    else if (typeof id === 'number' && name.startsWith("NationName_")) {
      foundData.nations.set(id, node);
    }
    // 4. Nh·∫≠n d·∫°ng Programs (ID chu·ªói, vi·∫øt hoa, ƒë·ªô d√†i > 3)
    else if (typeof id === 'string' && id === id.toUpperCase() && id.length > 3) {
      // Ki·ªÉm tra th√™m n·∫øu c√≥ tr∆∞·ªùng image ho·∫∑c sort ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
      if (node.image || node.sort !== undefined) {
        foundData.programs.set(id, node);
      }
    }
  }

  // Ti·∫øp t·ª•c duy·ªát s√¢u v√†o c√°c thu·ªôc t√≠nh con
  Object.values(node).forEach(child => traverseAndExtract(child, foundData));
}

// H√†m tr·ª£ gi√∫p ƒë·ªÉ Upsert d·ªØ li·ªáu
async function upsertData(supabase: any, tableName: string, dataList: any[]): Promise<void> {
  if (dataList.length === 0) {
    console.log(`Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ upsert cho b·∫£ng ${tableName}`);
    return;
  }

  const { error } = await supabase
    .from(tableName)
    .upsert(dataList, { onConflict: 'id' });

  if (error) {
    console.error(`‚ùå L·ªói khi upsert v√†o b·∫£ng ${tableName}:`, error);
    throw error;
  } else {
    console.log(`‚úÖ Upsert th√†nh c√¥ng ${dataList.length} b·∫£n ghi v√†o ${tableName}`);
  }
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô metadata...');
    
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // 1. G·ªçi API
    console.log(`üì° ƒêang g·ªçi API: ${METADATA_API_URL}`);
    const response = await fetch(METADATA_API_URL, {
      method: 'GET',
      headers: {
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Referer': 'https://renderz.app/',
        'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36',
        'Sec-Ch-Ua': '"Chromium";v="141", "Google Chrome";v="141", "Not?A_Brand";v="8"',
        'Sec-Ch-Ua-Mobile': '?1',
        'Sec-Ch-Ua-Platform': '"Android"',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'Accept-Encoding': 'gzip, deflate, br',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå HTTP error! status: ${response.status}`);
      console.error(`Error response: ${errorText.substring(0, 500)}`);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const rawApiData = await response.json();
    console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ API');

    // B·ªô ch·ª©a ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£
    const foundData = {
      clubs: new Map(),
      leagues: new Map(),
      nations: new Map(),
      programs: new Map()
    };

    // 2. B·∫Øt ƒë·∫ßu qu√° tr√¨nh tr√≠ch xu·∫•t
    console.log('üîç B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t d·ªØ li·ªáu...');
    traverseAndExtract(rawApiData, foundData);

    console.log(`üìä K·∫øt qu·∫£ tr√≠ch xu·∫•t:`);
    console.log(`   - Clubs: ${foundData.clubs.size}`);
    console.log(`   - Leagues: ${foundData.leagues.size}`);
    console.log(`   - Nations: ${foundData.nations.size}`);
    console.log(`   - Programs: ${foundData.programs.size}`);

    // 3. Chu·∫©n b·ªã d·ªØ li·ªáu v√† √Ånh x·∫° R√µ r√†ng
    const mapToBasicSchema = (item: any) => ({
      id: item.id,
      name: item.name,
      image: item.image || null,
      rawData: item,
      updatedAt: new Date().toISOString()
    });

    const mapToProgramSchema = (item: any) => ({
      id: item.id,
      name: item.name,
      image: item.image || null,
      sort: item.sort !== undefined ? item.sort : null,
      rawData: item,
      updatedAt: new Date().toISOString()
    });

    const clubsToUpsert = Array.from(foundData.clubs.values()).map(mapToBasicSchema);
    const leaguesToUpsert = Array.from(foundData.leagues.values()).map(mapToBasicSchema);
    const nationsToUpsert = Array.from(foundData.nations.values()).map(mapToBasicSchema);
    const programsToUpsert = Array.from(foundData.programs.values()).map(mapToProgramSchema);

    // 4. L∆∞u d·ªØ li·ªáu v√†o Supabase
    console.log('üíæ B·∫Øt ƒë·∫ßu l∆∞u d·ªØ li·ªáu v√†o Supabase...');
    await upsertData(supabase, 'clubs', clubsToUpsert);
    await upsertData(supabase, 'leagues', leaguesToUpsert);
    await upsertData(supabase, 'nations', nationsToUpsert);
    await upsertData(supabase, 'programs', programsToUpsert);

    const totalRecords = clubsToUpsert.length + leaguesToUpsert.length + 
                        nationsToUpsert.length + programsToUpsert.length;

    console.log(`üéâ Ho√†n t·∫•t ƒë·ªìng b·ªô metadata! T·ªïng: ${totalRecords} b·∫£n ghi`);

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Metadata sync completed successfully',
        data: {
          clubs: clubsToUpsert.length,
          leagues: leaguesToUpsert.length,
          nations: nationsToUpsert.length,
          programs: programsToUpsert.length,
          total: totalRecords
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('‚ùå Sync error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(
      JSON.stringify({
        success: false,
        error: errorMessage,
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});
